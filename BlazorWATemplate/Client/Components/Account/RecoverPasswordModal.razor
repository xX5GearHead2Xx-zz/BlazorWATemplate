@page "/Account/RecoverPasswordModal"
@inject IToastService ToastService
@inject IAccountService AccountService

<div class="container">
    <EditForm Model="PasswordRecoveryDTO" OnValidSubmit="SendRecoveryRequest">
        <DataAnnotationsValidator />
        <div class="form-floating mb-3">
            <InputText class="form-control" id="RecoveryEmail" @bind-Value="PasswordRecoveryDTO.Email" placeholder="Email" />
            <label for="RecoveryEmail">Email</label>
            <ValidationMessage For="(() => PasswordRecoveryDTO.Email)" />
        </div>
        <GoogleRecaptcha RecaptchaResponseChanged="AlertRecaptchaResponse" />
        <ValidationMessage For="(() => PasswordRecoveryDTO.RecaptchaResponse)" />
        <InputText type="hidden" id="RegisterRecaptchaResponse" @bind-Value="PasswordRecoveryDTO.RecaptchaResponse" />
        <button type="submit" class="btn btn-primary w-100">Recover Password</button>
        <hr />
        <p>You will receive an email containing instructions on how to reset your password.</p>
    </EditForm>
</div>
@code {
    [CascadingParameter] BlazoredModalInstance RecoverPasswordModalInstance { get; set; } = default!;
    [CascadingParameter] IModalService ModalService { get; set; } = default!;
    PasswordRecoveryDTO PasswordRecoveryDTO = new();

    public void AlertRecaptchaResponse(string response)
    {
        PasswordRecoveryDTO.RecaptchaResponse = response;
    }

    async Task SendRecoveryRequest()
    {
        var Result = await AccountService.RecoverPassword(PasswordRecoveryDTO);
        if (!Result.Success)
        {
            ToastService.ShowToast(ToastLevel.Error, Result.Message);
        }
        else
        {
            await RecoverPasswordModalInstance.CloseAsync();
            ToastService.ShowToast(ToastLevel.Success, Result.Message);
            RecoverPasswordModalInstance = new();
        }
    }
}
