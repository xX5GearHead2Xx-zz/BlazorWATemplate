@page "/Account/ChangePasswordModal"
@inject IToastService ToastService
@inject IAccountService AccountService
@inject AuthenticationStateProvider AuthenticationStateProvider
<div style="width:500px">
<AuthorizeView Context="AuthContext">
    <Authorized>
        <EditForm Model="ChangePasswordDTO" OnValidSubmit="UpdatePassword" Context="FormContext">
            <DataAnnotationsValidator />
            <div class="form-floating mb-3">
                <InputText class="form-control" id="OldPassword" @bind-Value="ChangePasswordDTO.OldPassword" placeholder="Old Password" />
                <label for="OldPassword">OldPassword</label>
                <ValidationMessage For="(() => ChangePasswordDTO.OldPassword)" />
            </div>
            <div class="form-floating mb-3">
                <InputText class="form-control" id="NewPassword" @bind-Value="ChangePasswordDTO.NewPassword" placeholder="New Password" type="password" />
                <label for="NewPassword">New Password</label>
                <ValidationMessage For="(() => ChangePasswordDTO.NewPassword)" />
            </div>
            <div class="form-floating mb-3">
                <InputText class="form-control" id="ConfirmPassword" @bind-Value="ChangePasswordDTO.ConfirmPassword" placeholder="Confirm Password" type="password" />
                <label for="ConfirmPassword">Confirm New Password</label>
                <ValidationMessage For="(() => ChangePasswordDTO.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary w-100">Change Password</button>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger">Please log in to change your password.</div>
    </NotAuthorized>
</AuthorizeView>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ChangePasswordModalInstance { get; set; } = default!;
    [CascadingParameter] IModalService ModalService { get; set; } = default!;

    ChangePasswordDTO ChangePasswordDTO = new();

    async Task UpdatePassword()
    {
        var Result = await AccountService.ChangePassword(ChangePasswordDTO);
        if (!Result.Success)
        {
            ToastService.ShowToast(ToastLevel.Error, Result.Message);
        }
        else
        {
            await ChangePasswordModalInstance.CloseAsync();
            ToastService.ShowToast(ToastLevel.Success, Result.Message);
            ChangePasswordDTO = new();
        }
    }
}
